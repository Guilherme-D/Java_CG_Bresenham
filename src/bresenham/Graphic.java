/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bresenham;

//import com.sun.prism.shader.DrawCircle_Color_Loader;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.sql.JDBCType;
import java.sql.Time;
import javax.swing.JColorChooser;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Guilherme
 * @author Rama
 */
public class Graphic extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Graphic() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        Painel_draw = new javax.swing.JPanel();
        Color_btn = new javax.swing.JButton();
        Selected_color = new javax.swing.JPanel();
        Reta = new javax.swing.JRadioButton();
        Circunferencia = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        btn_desfazer_reta = new javax.swing.JButton();
        up_btn = new javax.swing.JButton();
        down_btn = new javax.swing.JButton();
        rgt_btn = new javax.swing.JButton();
        lft_btn = new javax.swing.JButton();
        transrot_value = new javax.swing.JTextField();
        transladar_btn = new javax.swing.JRadioButton();
        rotacionar_btn = new javax.swing.JRadioButton();
        Antialiasing = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bresenham");
        setBackground(new java.awt.Color(0, 0, 0));

        Painel_draw.setBackground(new java.awt.Color(255, 255, 255));
        Painel_draw.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Painel_draw.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Painel_drawMouseDragged(evt);
            }
        });
        Painel_draw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Painel_drawMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                Painel_drawMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Painel_drawMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout Painel_drawLayout = new javax.swing.GroupLayout(Painel_draw);
        Painel_draw.setLayout(Painel_drawLayout);
        Painel_drawLayout.setHorizontalGroup(
            Painel_drawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 795, Short.MAX_VALUE)
        );
        Painel_drawLayout.setVerticalGroup(
            Painel_drawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Color_btn.setText("Selecionar Cor");
        Color_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Color_btnActionPerformed(evt);
            }
        });

        Selected_color.setBackground(new java.awt.Color(0, 0, 0));
        Selected_color.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout Selected_colorLayout = new javax.swing.GroupLayout(Selected_color);
        Selected_color.setLayout(Selected_colorLayout);
        Selected_colorLayout.setHorizontalGroup(
            Selected_colorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );
        Selected_colorLayout.setVerticalGroup(
            Selected_colorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        buttonGroup1.add(Reta);
        Reta.setSelected(true);
        Reta.setText("Reta");

        buttonGroup1.add(Circunferencia);
        Circunferencia.setText("Circunferencia");

        jLabel1.setText("Desenhar: ");

        btn_desfazer_reta.setText("Desfazer");
        btn_desfazer_reta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_desfazer_retaActionPerformed(evt);
            }
        });

        up_btn.setText("^");
        up_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                up_btnActionPerformed(evt);
            }
        });

        down_btn.setText("v");
        down_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                down_btnActionPerformed(evt);
            }
        });

        rgt_btn.setText(">");
        rgt_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgt_btnActionPerformed(evt);
            }
        });

        lft_btn.setText("<");
        lft_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lft_btnActionPerformed(evt);
            }
        });

        buttonGroup2.add(transladar_btn);
        transladar_btn.setText("Transladar");

        buttonGroup2.add(rotacionar_btn);
        rotacionar_btn.setText("Rotacionar");

        Antialiasing.setText("Anti Aliasing");
        Antialiasing.setActionCommand("Antialiasing");
        Antialiasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AntialiasingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Painel_draw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Reta)
                    .addComponent(Circunferencia)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btn_desfazer_reta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Color_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Selected_color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lft_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(transrot_value)
                                    .addComponent(down_btn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rgt_btn))
                            .addComponent(up_btn)))
                    .addComponent(transladar_btn)
                    .addComponent(rotacionar_btn)
                    .addComponent(Antialiasing, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Selected_color, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Color_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Reta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Circunferencia)
                .addGap(29, 29, 29)
                .addComponent(btn_desfazer_reta, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Antialiasing, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(transladar_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rotacionar_btn)
                .addGap(38, 38, 38)
                .addComponent(up_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rgt_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lft_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transrot_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(down_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(176, Short.MAX_VALUE))
            .addComponent(Painel_draw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //x1, x2, y1, y2 -> posição dos pontos escolhidos
         int x1, x2, y1, y2;
        /**
         * pega dois pontos distintos para traçar reta ou circulo
        *<p> 
        * @param MouseEvent
        * @param Reta : jRadioButton
        * @param Circunerencia : JRadioButton
     */

    
    private void Painel_drawMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Painel_drawMouseClicked
        // TODO add your handling code here:
        
        Graphics g = super.getGraphics();
               
        if(evt.getButton() == evt.BUTTON1){
                       
            //Coordenadas x e y do mouse quando clicar no painel
            int x = getMousePosition().x;
            int y = getMousePosition().y;
            cont_click++;
        
        
            //Cria um circulo vermelho para indicar onde foi clicado
            g.setColor(Color.RED);
            g.drawOval(x, y, 5, 5);
            g.fillOval(x, y, 5, 5);

       
           
            //verifica se dois pontos foram escolhidos e caso seja, chama o bresenham
            if(cont_click == 1){
                x1 = x;
                y1 = y;

            }else if(cont_click == 2){
                
                x2 = x;
                y2 = y;
                cont_click = 0;
                
                if(Reta.isSelected()){
                    
                    
                    Bresenham_Line(x1, y1, x2, y2);
                    pontos.add(x1);
                    pontos.add(y1);
                    pontos.add(x2);
                    pontos.add(y2);
                    System.out.println(cor);
                    rouc.add(1);
                    arr_cor.add(cor);
                    is_trans_rot.add(0);
                   

                   // System.out.println("x1 "+x1+" y1: "+y1);
                    //System.out.println("x2 "+x2+" y2: "+y2);
                }else{
                 Bresenham_circle(x1, y1, x2, y2);  
                    pontos.add(x1);
                    pontos.add(y1);
                    pontos.add(x2);
                    pontos.add(y2);
                    rouc.add(2);
                    arr_cor.add(cor);
                    is_trans_rot.add(0);
                }
            }
            
        }
        
        
       
    }//GEN-LAST:event_Painel_drawMouseClicked

    /*
       *painel de dialogo de cores.
       * 
       * <p>Apenas para seleçao de cores
     */
    private void Color_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Color_btnActionPerformed
        // TODO add your handling code here:
        
        JColorChooser jcc = new JColorChooser();
        cor = Color.BLACK;
        cor = jcc.showDialog(null, "Selecione uma cor", Color.RED);
        
        Selected_color.setBackground(cor);
        
    }//GEN-LAST:event_Color_btnActionPerformed

    private void Painel_drawMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Painel_drawMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_Painel_drawMouseDragged
int inix, iniy, finx, finy;
    private void btn_desfazer_retaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_desfazer_retaActionPerformed
        // TODO add your handling code here:
        
        //pega o tamanho dos arrays 
        int size_pontos = pontos.size()-1; //array que guarda os pontos
        int size_rouc = rouc.size()-1;  //array que guarda se foi criado uma reta ou circunferencia
        Color temp_color = cor; //guarda cor escolhida para desenhar
      
        
            //colore de branco os pontos vermelhos de onde foi clicado
            Graphics g = super.getGraphics();
            g.setColor(Color.WHITE);
            g.drawOval(pontos.get(size_pontos-3), pontos.get(size_pontos-2), 5, 5);
            g.fillOval(pontos.get(size_pontos-3), pontos.get(size_pontos-2), 5, 5);

            g.drawOval(pontos.get(size_pontos-1), pontos.get(size_pontos), 5, 5);
            g.fillOval(pontos.get(size_pontos-1), pontos.get(size_pontos), 5, 5);
        
        
        cor = Color.WHITE; //troca momentaneamente a cor para desenhar de branco por cima
        
        
        //verifica se a remocao e de reta ou aresta, e apos identificado, desenha por cima de branco
        if(rouc.get(size_rouc)==1){
             Bresenham_Line(pontos.get(size_pontos-3), pontos.get(size_pontos-2), pontos.get(size_pontos-1), pontos.get(size_pontos));
             
             
        }else{
              Bresenham_circle(pontos.get(size_pontos-3), pontos.get(size_pontos-2), pontos.get(size_pontos-1), pontos.get(size_pontos));
            }
        
        
        
        //remove os pontos que foram usados para desenhar
        pontos.remove(size_pontos);
        pontos.remove(size_pontos-1);
        pontos.remove(size_pontos-2);
        pontos.remove(size_pontos-3);
        
        //remove da lista a indicação de reta/circunferencia
        rouc.remove(size_rouc);
        arr_cor.remove(size_rouc);
        
        x1selected += is_trans_rot.get(is_trans_rot.size()-1);
        //y1selected += Integer.parseInt(transrot_value.getText());
        x2selected += is_trans_rot.get(is_trans_rot.size()-1);
        // y2selected += Integer.parseInt(transrot_value.getText());
        
        is_trans_rot.remove(is_trans_rot.size()-1);
        
        re_draw();
        //volta a cor previamente escolhida
        cor = temp_color;
        
       
        
    }//GEN-LAST:event_btn_desfazer_retaActionPerformed
/**
 * redesenha estruturas na pilha
 * 
 * <p> ao desfazer uma reta, é necessário redesenhar as estruturas contidas nas pilhas evitar partes faltantes no desenho
 * 
 */
    public void re_draw(){
        
        int cont = 0;
           
        //percorre o array que indica se é uma reta ou circunferencia
        //dependendo do que for, redesenha a reta/circunferencia
        for(int i = 0; i <  rouc.size(); i++){
            
            if(rouc.get(i)==1){
                
                //pega a cor que foi desenhada originalmete para redesenhar
               cor = arr_cor.get(i);
               
               //muda o valor de rotação do array para indicar que é a ultima das rotações
               is_trans_rot.set(is_trans_rot.size()-1, 0);
               
                //so vai redesenhar o que nao for indicado como translação/rotação
                if(is_trans_rot.get(i) == 0){
                     Bresenham_Line(pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3));
                    
                }
                
                
            }else{
                 //pega a cor que foi desenhada originalmete para redesenhar
               cor = arr_cor.get(i);
               
               //muda o valor de rotação do array para indicar que é a ultima das rotações
               is_trans_rot.set(is_trans_rot.size()-1, 0);
               
               if(is_trans_rot.get(i) == 0){
                   
                   Bresenham_circle(pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3));
                    
                }
               
               //Bresenham_circle(pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3));
            }
            cont += 4;
        }
    
    }
    
    
    private void Painel_drawMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Painel_drawMousePressed
        // TODO add your handling code here:
        inix = getMousePosition().x;
        iniy = getMousePosition().y;
    }//GEN-LAST:event_Painel_drawMousePressed
 int x1selected = 0, y1selected = 0, x2selected = 0, y2selected = 0; 
 int xo,yo, x1o, y1o;
    private void Painel_drawMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Painel_drawMouseReleased
        // TODO add your handling code here:
       
       //is_reta = true;
        finx = getMousePosition().x;
        finy = getMousePosition().y;
        
        Color transp = new Color(0,0,0,0);
        
        Graphics g = super.getGraphics();
        g.setColor(transp);
        
        //cria retangulo pra selecionar os pontos da reta/circunferencia
        int xmin = Math.min(inix,finx);
        int xmax = Math.max(inix,finx);
        int ymin = Math.min(iniy,finy);
        int ymax = Math.max(iniy,finy);
        int largura = Math.abs(inix-finx);
        int altura = Math.abs(iniy-finy);
            
        g.drawRect(xmin, ymin, largura, altura);
        
         
       // g.setColor(Color.WHITE);
        
        //espera um pouco
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(Graphic.class.getName()).log(Level.SEVERE, null, ex);
        }
        //"deleta" triangulo criado
        // g.drawRect(xmin, ymin, largura, altura);
         
         
         
        int cont = 0;
        int k = 0;
        //ve se ospontos estao dentro do retangulo
        for(int i = 0; i < pontos.size()-1; i++){
       
            if((xmin <= pontos.get(i) && pontos.get(i) <= xmax && ymin <= pontos.get(i+1) && pontos.get(i+1) <= ymax)&&(xmin <= pontos.get(i+2) && pontos.get(i+2) <= xmax && ymin <= pontos.get(i+3) && pontos.get(i+3) <= ymax)){
                  
                //caso tiver, seleciona os pontos
                  
                g.setColor(Color.MAGENTA);
                g.drawOval(pontos.get(i), pontos.get(i+1), 5, 5);
                g.fillOval(pontos.get(i), pontos.get(i+1), 5, 5);
                g.drawOval(pontos.get(i+2), pontos.get(i+3), 5, 5);
                g.fillOval(pontos.get(i+2), pontos.get(i+3), 5, 5);
               
                
                
                x1selected = pontos.get(i);
                y1selected = pontos.get(i+1);
                
                x2selected = pontos.get(i+2);
                y2selected = pontos.get(i+3);
                
                
                
                //percorre o array de pontos para saber a posição dos pontos selecionados
                //e saber se os pontos sao de reta ou circunferencia
                for(int j = 0; i < pontos.size()-1; j++){
                
                    if(x1selected == pontos.get(j)){
                        //caso encontre o ponto, o valor do array responsavel por saber se 
                        //aquela reta/circunferencia é fruto de uma translação/rotação
                        //recebe valor 1 (arbitrario) para indicar que uma mudança ocorreu
                        is_trans_rot.set(j, 1);
                        
                        if(j != 0){
                            k++;
                        }
                         j = pontos.size();
                    }
                    cont += 4;
                }
               
               i = pontos.size()-1;
            }
            i+=3;
        }
        
        if(rouc.size() > 0){
            if(rouc.get(k) == 1){
                is_reta = true;
            }else{
                is_reta = false;
            }
        }
        
    }//GEN-LAST:event_Painel_drawMouseReleased
 boolean is_reta = true;
    private void up_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_up_btnActionPerformed
        // TODO add your handling code here:
        
        if(transladar_btn.isSelected()){
        
            Color temp = cor;
            cor = Color.WHITE;
        
            is_trans_rot.set(is_trans_rot.size()-1, 1);
      
        
                 if(is_reta){
                    rouc.add(1);
                    Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
                
                }else{
                    rouc.add(2);
                    Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
                }
    
                
                y1selected -= Integer.parseInt(transrot_value.getText());
                y2selected -= Integer.parseInt(transrot_value.getText());
                
                pontos.add(x1selected);
                pontos.add(y1selected);
                pontos.add(x2selected);
                pontos.add(y2selected);
                
    
                
                arr_cor.add(temp);
                is_trans_rot.add(Integer.parseInt(transrot_value.getText()));
                
               
                cor = temp;
               // g.setColor(Color.WHITE);
                if(is_reta){
                     Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
                
                }else{
                    Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
                
                }
        
        }else if(rotacionar_btn.isSelected()){
        
             Color temp = cor;
            cor = Color.WHITE;
        
            is_trans_rot.set(is_trans_rot.size()-1, 1);
      
         
                 if(is_reta){
                    rouc.add(1);
                    Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
                
                }else{
                    rouc.add(2);
                    Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
                }
    
                  x1selected = (int)(x1selected*(Math.cos(Integer.parseInt(transrot_value.getText())))-((int)y2selected*Math.sin(Integer.parseInt(transrot_value.getText()))));
                  y1selected = (int)(x1selected*(Math.sin(Integer.parseInt(transrot_value.getText())))+((int)y2selected*Math.cos(Integer.parseInt(transrot_value.getText()))));
                  x2selected = (int)(x2selected*(Math.cos(Integer.parseInt(transrot_value.getText())))-((int)y1selected*Math.sin(Integer.parseInt(transrot_value.getText()))));
                  y2selected = (int)(x2selected*(Math.sin(Integer.parseInt(transrot_value.getText())))+((int)y1selected*Math.cos(Integer.parseInt(transrot_value.getText()))));
                  //x2selected *= (int)(Math.cos(Integer.parseInt(transrot_value.getText())));
                  //y2selected *= (int)(Math.cos(Integer.parseInt(transrot_value.getText())));
                /*
                y1selected -= Integer.parseInt(transrot_value.getText());
                y2selected -= Integer.parseInt(transrot_value.getText());
                */
                pontos.add(x1selected);
                pontos.add(y1selected);
                pontos.add(x2selected);
                pontos.add(y2selected);
                
    
                
                arr_cor.add(temp);
                is_trans_rot.add(Integer.parseInt(transrot_value.getText()));
                
               
                cor = temp;
               // g.setColor(Color.WHITE);
                if(is_reta){
                     Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
                
                }else{
                    Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
                
                }
        
        }
        
    }//GEN-LAST:event_up_btnActionPerformed

    private void rgt_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgt_btnActionPerformed
        // TODO add your handling code here:
        
        
        
       if(transladar_btn.isSelected()){
       
            Color temp = cor;
            cor = Color.WHITE;

            is_trans_rot.set(is_trans_rot.size()-1, 1);
            
            if(is_reta){
                rouc.add(1);
                Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
                
            }else{
                rouc.add(2);
                Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
            }
    
                
            x1selected += Integer.parseInt(transrot_value.getText());
            x2selected += Integer.parseInt(transrot_value.getText());
                            
            pontos.add(x1selected);
            pontos.add(y1selected);
            pontos.add(x2selected);
            pontos.add(y2selected);
            
    
                
            arr_cor.add(temp);
            is_trans_rot.add(Integer.parseInt(transrot_value.getText()));
                
               
            cor = temp;
            
            if(is_reta){
                Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
            }else{
                Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
            }
            
       }else if(rotacionar_btn.isSelected()){
        
        
        }
        
    }//GEN-LAST:event_rgt_btnActionPerformed

    private void AntialiasingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AntialiasingActionPerformed
        // TODO add your handling code here:

        //seleciona cor branca
        Color temp= cor;
        temp =Color.WHITE;

        
        //pegas as dimensoes da tela desenhada
        int height=java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
        int width=java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
        
        //multiplica por 3 a  altura e a largura por 3
        height = height*3;
        width= width*3;
        
        //criar uma matrix de cores 3x maior do que a area original de desenho
        Color[][] color = new Color[height][width];
        for(int i=0;i<height;i++)
        {//System.out.println(i);
            for(int j=0;j<width;j++)
            {   
                //preenche dessa matrix de cores com a cor branca
                color[i][j]=temp;
            }
        }
        
        
        //versao adaptada do metodo redraw para desenhar na matrix gigante
         int cont = 0;
           
        //percorre o array que indica se é uma reta ou circunferencia
        //dependendo do que for, redesenha a reta/circunferencia
        for(int i = 0; i <  rouc.size(); i++){
            
            if(rouc.get(i)==1){
                

               //muda o valor de rotação do array para indicar que é a ultima das rotações
               is_trans_rot.set(is_trans_rot.size()-1, 0);
               
                //so vai redesenhar o que nao for indicado como translação/rotação
                if(is_trans_rot.get(i) == 0){
                     SSAABresenham_Line(color,pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3),arr_cor.get(i));
                    /*if(is_reta){
                        Bresenham_Line(pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3));
                    }else{
                        Bresenham_circle(pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3));
                    }
                    */
                }
                
                
            }else{

               
               //muda o valor de rotação do array para indicar que é a ultima das rotações
               is_trans_rot.set(is_trans_rot.size()-1, 0);
               
               if(is_trans_rot.get(i) == 0){
                   
                   SSAABresenham_circle(color,pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3),arr_cor.get(i));
                   /* 
                    if(is_reta){
                        Bresenham_Line(pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3));
                    }else{
                        Bresenham_circle(pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3));
                    }
                   */
                    
                }
               
               //Bresenham_circle(pontos.get(cont), pontos.get(cont+1), pontos.get(cont+2), pontos.get(cont+3));
            }
            cont += 4;
        }
        for(int i=0;i<arr_cor.size();i++)
        {
        //System.out.println(""+arr_cor.get(i));
        }
    }//GEN-LAST:event_AntialiasingActionPerformed

    private void lft_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lft_btnActionPerformed
        // TODO add your handling code here:
         if(transladar_btn.isSelected()){


            Color temp = cor;
            cor = Color.WHITE;

            is_trans_rot.set(is_trans_rot.size()-1, 1);
      
        
                 if(is_reta){
                    rouc.add(1);
                    Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
                
                }else{
                    rouc.add(2);
                    Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
                }
    
                
                x1selected -= Integer.parseInt(transrot_value.getText());
                //y1selected += Integer.parseInt(transrot_value.getText());
                x2selected -= Integer.parseInt(transrot_value.getText());
               // y2selected += Integer.parseInt(transrot_value.getText());
                
                pontos.add(x1selected);
                pontos.add(y1selected);
                pontos.add(x2selected);
                pontos.add(y2selected);
                
    
                
                arr_cor.add(temp);
                is_trans_rot.add(Integer.parseInt(transrot_value.getText()));
                
               
                cor = temp;
               // g.setColor(Color.WHITE);
                if(is_reta){
                     Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
                
                }else{
                    Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
                
                }
        }else if(rotacionar_btn.isSelected()){
        
        
        } 
                                           

    }//GEN-LAST:event_lft_btnActionPerformed

    private void down_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_down_btnActionPerformed
        // TODO add your handling code here:
         if(transladar_btn.isSelected()){


            Color temp = cor;
            cor = Color.WHITE;

            is_trans_rot.set(is_trans_rot.size()-1, 1);
      
        
                 if(is_reta){
                    rouc.add(1);
                    Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
                
                }else{
                    rouc.add(2);
                    Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
                }
    
                
                y1selected += Integer.parseInt(transrot_value.getText());
                y2selected += Integer.parseInt(transrot_value.getText());
                
                pontos.add(x1selected);
                pontos.add(y1selected);
                pontos.add(x2selected);
                pontos.add(y2selected);
                
    
                
                arr_cor.add(temp);
                is_trans_rot.add(Integer.parseInt(transrot_value.getText()));
                
               
                cor = temp;
               // g.setColor(Color.WHITE);
                if(is_reta){
                     Bresenham_Line(x1selected, y1selected, x2selected, y2selected);
                
                }else{
                    Bresenham_circle(x1selected, y1selected, x2selected, y2selected);
                
                }

        }else if(rotacionar_btn.isSelected()){
        
        
        }
    }//GEN-LAST:event_down_btnActionPerformed
        
    
    
    /**
     *desenha um circulo utilizando bresenham
     * 
     * <p> bresenham calcula um oitavo do circulo e depois plota o resto por espelhamento
     * @param x1
     * @param y1
     * @param x2
     * @param y2
     * 
     * 
     */
     public void Bresenham_circle(int x1, int y1, int x2, int y2){
         
        //calcula o raio da circunferencia dados os dois pontos
        int raio = (int)Math.sqrt((Math.pow((x2-x1),2)) + (Math.pow((y2-y1),2)));
        int y = raio;
        
        int x = 0; int p = 3-2*raio;
        
        plotasimetrica(x,y,x1,y1);
        
        while(x<y){
            if(p < 0){
                p += 4*x+6;
            }else{
                p += 4*(x-y)+10;
                y--;
            }
            x++;
            plotasimetrica(x,y,x1,y1);
        }
     
     }
     
     /**
      * SSAA é uma implementacao de circulo de bresenham em matriz
      * 
      * <p> a area da matriz e 9x maior que a original e por isso é necessario fazer algumas alteracoes, como transladar os pontos pra uma area inicial 3x mais distante em cada eixo coordenado
      * 
      * 
      * @param c 
      * @param x1
      * @param y1
      * @param x2
      * @param y2
      * @param cor 
      */
     private void SSAABresenham_circle(Color c[][],int x1, int y1, int x2, int y2, Color cor){
        
        x1=x1*3;
        y1=y1*3;
        x2=x2*3;
        y2=y2*3;
        
        //calcula o raio da circunferencia dados os dois pontos
        int raio = (int)Math.sqrt((Math.pow((x2-x1),2)) + (Math.pow((y2-y1),2)));
        int y = raio;
        
        int x = 0; int p = 3-2*raio;
        
        //plotasimetrica(x,y,x1,y1);
        //(int a, int b, int xc, int yc)
        SSAAplota(c,x1+x, y1+y,cor);
        SSAAplota(c,x1+x, y1-y,cor);
        SSAAplota(c,x1-x, y1+y,cor);
        SSAAplota(c,x1-x, y1-y,cor);
        SSAAplota(c,x1+x, y1+y,cor);
        SSAAplota(c,x1+x, y1-y,cor);
        SSAAplota(c,x1-x, y1+y,cor);
        SSAAplota(c,x1-x, y1-y,cor);
        
        
        
        while(x<y){
            if(p < 0){
                p += 4*x+6;
            }else{
                p += 4*(x-y)+10;
                y--;
            }
            x++;
            //plotasimetrica(x,y,x1,y1);
        SSAAplota(c,x1+x, y1+y,cor);
        SSAAplota(c,x1+x, y1-y,cor);
        SSAAplota(c,x1-x, y1+y,cor);
        SSAAplota(c,x1-x, y1-y,cor);
        SSAAplota(c,x1+x, y1+y,cor);
        SSAAplota(c,x1+x, y1-y,cor);
        SSAAplota(c,x1-x, y1+y,cor);
        SSAAplota(c,x1-x, y1-y,cor);
        
        }
     
     }
    
     

    
    /**
     * Plota circulo usando segmentos.
     * 
     * <p> esse metodo utiliza do fato dos circulos terem extremidades espelhadas para plotar
     * 
     * @param a
     * @param b
     * @param xc
     * @param yc 
     */ 
    public void plotasimetrica(int a, int b, int xc, int yc){
    
        plota(xc+a, yc+b);
        plota(xc+a, yc-b);
        plota(xc-a, yc+b);
        plota(xc-a, yc-b);
        plota(xc+b, yc+a);
        plota(xc+b, yc-a);
        plota(xc-b, yc+a);
        plota(xc-b, yc-a);
    
    }
    
    
    
    //Cont_click -> variavel para saber se foram escolhidos dois pontos
    int cont_click = 0;
    /**
     * Reta utilizando bresenham em uma matrix
     * 
     * <p> matrix c é 9x maior, para fins de antialiasing
     * @param c
     * @param x1
     * @param y1
     * @param x2
     * @param y2
     * @param cor 
     */
    private void SSAABresenham_Line(Color c[][],int x1, int y1, int x2, int y2, Color cor){
        x1=x1*3;
        y1=y1*3;
        x2=x2*3;
        y2=y2*3;
        
        int xincr, yincr;
        int x, y, p, c1, c2;
        
        int dx = x2-x1, dy = y2-y1;
       
        if(dx < 0){
            xincr = -1;
            dx = -dx;
        }else{
            xincr = 1;
        }
        
        
        if(dy < 0){
            yincr = -1;
            dy = -dy;
        }else{
            yincr = 1;
        }
    
        
        x = x1; y = y1;
        c[x][y]=cor;
        //plota(x,y);
        
        if(dx > dy){
            //1º Caso
            
            p = 2*dy-dx;
            c1 = 2*dy;
            c2 = 2*(dy-dx);
        
            
            for(int i = 0; i < dx; i++){
                x += xincr;
                
                if(p < 0){
                    p += c1;
                }else{
                    p += c2;
                    y += yincr;
                }
                c[x][x]=cor;
                //  plota(x,y);
            }
        }else{
            //2º caso
            p = 2*dx-dy;
            c1 = 2*dx;
            c2 = 2*(dx-dy);
            
            for(int i = 0; i < dy; i++){
                y += yincr;
                
                if(p < 0){
                    p += c1;
                }else{
                    p += c2;
                    x += xincr;
                }
                
                c[x][y]=cor;
                //plota(x,y);
            }
        
        }
    }
        /**
         * Bresenham line comum, direto na area de desenho.
         * 
         * 
         * @param x1
         * @param y1
         * @param x2
         * @param y2 
         */
    public void Bresenham_Line(int x1, int y1, int x2, int y2){
        
        int xincr, yincr;
        int x, y, p, c1, c2;
        
        int dx = x2-x1, dy = y2-y1;
       
        if(dx < 0){
            xincr = -1;
            dx = -dx;
        }else{
            xincr = 1;
        }
        
        
        if(dy < 0){
            yincr = -1;
            dy = -dy;
        }else{
            yincr = 1;
        }
    
        
        x = x1; y = y1;
        
        plota(x,y);
        
        if(dx > dy){
            //1º Caso
            
            p = 2*dy-dx;
            c1 = 2*dy;
            c2 = 2*(dy-dx);
        
            
            for(int i = 0; i < dx; i++){
                x += xincr;
                
                if(p < 0){
                    p += c1;
                }else{
                    p += c2;
                    y += yincr;
                }
                
                plota(x,y);
            }
        }else{
            //2º caso
            p = 2*dx-dy;
            c1 = 2*dx;
            c2 = 2*(dx-dy);
            
            for(int i = 0; i < dy; i++){
                y += yincr;
                
                if(p < 0){
                    p += c1;
                }else{
                    p += c2;
                    x += xincr;
                }
                
                plota(x,y);
            }
        
        }
    }
    
    
    
    //armazena a cor escolhida para desenhar
    Color cor;
    /**
     * Plota a cor escolhida nas coordenadas dadas
     * @param x
     * @param y 
     */
    public void plota(int x,int y){
            
        Graphics g = super.getGraphics();
        //System.out.println("----------------------"+cor);
        g.setColor(cor);
        g.drawOval(x, y, 2, 2);
        g.fillOval(x, y, 2, 2);
    }
    /**
     * Plota a cor escolhida nas coordenadas dadas da matriz
     * <p> a matriz c é 9x maior para fins de anti aliasing
     * @param c
     * @param x
     * @param y
     * @param color 
     */
        public void SSAAplota(Color c[][],int x,int y, Color color){
            //aqui é preciso testar se o ponto está dentro da matriz
        int altura=c.length;
        int largura=c[0].length;
        
        if(x<altura & y<largura)
        {
            c[x][y]=color;
        }
            
            
        
    }
    
    //array para armazenar os pontos da criação 
    ArrayList<Integer> pontos = new ArrayList<>();
    //reta ou circunferencia
    ArrayList<Integer> rouc = new ArrayList<>();
    //array de cores
    ArrayList<Color> arr_cor = new ArrayList<>();
    
   //pontos translações e rotações
    ArrayList<Integer> is_trans_rot = new ArrayList<Integer>();
    
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Graphic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Graphic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Graphic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Graphic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Graphic().setVisible(true);
            }
        });
        
       
      
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Antialiasing;
    private javax.swing.JRadioButton Circunferencia;
    private javax.swing.JButton Color_btn;
    private javax.swing.JPanel Painel_draw;
    private javax.swing.JRadioButton Reta;
    private javax.swing.JPanel Selected_color;
    private javax.swing.JButton btn_desfazer_reta;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton down_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton lft_btn;
    private javax.swing.JButton rgt_btn;
    private javax.swing.JRadioButton rotacionar_btn;
    private javax.swing.JRadioButton transladar_btn;
    private javax.swing.JTextField transrot_value;
    private javax.swing.JButton up_btn;
    // End of variables declaration//GEN-END:variables
}
